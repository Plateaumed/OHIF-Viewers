name: 'Staging'

on:
  push:
    branches:
      - staging

env:
  AWS_REGION: eu-west-2
  ECS_CLUSTER: Staging-Cluster
  ECS_TASK_DEFINITION: task-definition.json
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  ECS_SERVICE: staging-${{ github.event.repository.name }}
  CONTAINER_NAME: staging-${{ github.event.repository.name }}
  BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BRANCH_TAG: ${{ github.sha }}
        run: |
          COMMIT_ID=$(echo $BRANCH_TAG | cut -c 1-7)
          IMAGE_TAG=$(echo $BRANCH-$COMMIT_ID)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH -f ./platform/app/.recipes/Nginx-Orthanc/dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Download task definition
        id: get-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BRANCH_TAG: ${{ github.sha }}
        run: |
          COMMIT_ID=$(echo $BRANCH_TAG | cut -c 1-7)
          IMAGE_TAG=$(echo $BRANCH-$COMMIT_ID)
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecs describe-task-definition --task-definition  ${{ env.CONTAINER_NAME }} --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.get-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
